name: Build and Push Docker Images

on:
  push:
    branches: [ main, dev, develop ]
  pull_request:
    branches: [ main, dev, develop ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service:
          - name: backend
            context: ./packages/backend
            dockerfile: ./packages/backend/Dockerfile
          - name: frontend
            context: ./packages/frontend
            dockerfile: ./packages/frontend/Dockerfile
          - name: n8n
            context: ./packages/n8n
            dockerfile: ./packages/n8n/Dockerfile

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=dev,enable=${{ github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/develop' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.dockerfile }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  build-compose:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Update docker-compose with registry images
        run: |
          # Create a docker-compose override for CI/CD
          cat > docker-compose.ci.yml << EOF
          version: '3.8'
          services:
            backend:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-backend:${{ github.ref_name }}
            frontend:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-frontend:${{ github.ref_name }}
            n8n:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-n8n:${{ github.ref_name }}
          EOF

      - name: Test Docker Compose Configuration
        run: |
          docker-compose -f docker-compose.yml -f docker-compose.ci.yml config

      - name: Upload docker-compose CI config
        uses: actions/upload-artifact@v3
        with:
          name: docker-compose-ci
          path: docker-compose.ci.yml

  test-services:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          # Copy example env files
          cp packages/backend/.env.example packages/backend/.env || true
          cp packages/frontend/.env.example packages/frontend/.env || true
          cp packages/n8n/.env.example packages/n8n/.env || true

      - name: Start services
        run: |
          docker-compose up -d
          sleep 30  # Wait for services to start

      - name: Check backend health
        run: |
          curl -f http://localhost:8000/api/health || exit 1

      - name: Check frontend health
        run: |
          curl -f http://localhost:3000 || exit 1

      - name: Check n8n health
        run: |
          curl -f http://localhost:5678/healthz || exit 1

      - name: Show logs on failure
        if: failure()
        run: |
          docker-compose logs --tail=100

      - name: Stop services
        if: always()
        run: |
          docker-compose down -v

  notify:
    runs-on: ubuntu-latest
    needs: [build-and-push, build-compose]
    if: always()
    
    steps:
      - name: Notify build status
        run: |
          if [ "${{ needs.build-and-push.result }}" == "success" ] && [ "${{ needs.build-compose.result }}" == "success" ]; then
            echo "✅ All Docker images built and pushed successfully!"
            echo "Images are available at:"
            echo "  - ghcr.io/${{ github.repository }}-backend"
            echo "  - ghcr.io/${{ github.repository }}-frontend"
            echo "  - ghcr.io/${{ github.repository }}-n8n"
          else
            echo "❌ Build failed. Check the logs for details."
            exit 1
          fi
