services:
  # Frontend Service
  frontend:
    build:
      context: ./packages/frontend
      dockerfile: Dockerfile
    container_name: flowmastery-frontend
    ports:
      - "3000:80"
    environment:
      - VITE_API_URL=http://backend:8000
    depends_on:
      - backend
    networks:
      - flowmastery-network

  # Backend Service (New Modern Architecture)
  backend:
    build:
      context: ./packages/backend
      dockerfile: Dockerfile
    container_name: flowmastery-backend
    ports:
      - "8000:8000"
    environment:
      # Application Settings
      - APP_NAME=FlowMastery Backend
      - APP_VERSION=2.0.0
      - DEBUG=${DEBUG:-true}
      
      # Server Configuration
      - HOST=0.0.0.0
      - PORT=8000
      
      # Security
      - SECRET_KEY=${SECRET_KEY:-development-secret-key-change-in-production}
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      
      # CORS Origins
      - CORS_ORIGINS=http://localhost:3000,http://frontend:80,http://localhost:5173
      
      # Database & Cache
      - DATABASE_URL=postgresql+asyncpg://flowmastery:flowmastery@postgres:5432/flowmastery
      - REDIS_URL=redis://redis:6379/0
      - CACHE_TTL=300
      
      # n8n Integration
      - N8N_API_URL=${N8N_API_URL}
      - N8N_API_KEY=${N8N_API_KEY}
      
      # AI Services
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      
      # Logging & Monitoring
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FORMAT=json
      - ENABLE_METRICS=true
      - RATE_LIMIT_PER_MINUTE=60
    volumes:
      - backend_data:/app/data
      - ./packages/backend/app:/app/app  # Development volume mount
    depends_on:
      - postgres
      - redis
    networks:
      - flowmastery-network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: flowmastery-postgres
    environment:
      - POSTGRES_USER=flowmastery
      - POSTGRES_PASSWORD=flowmastery
      - POSTGRES_DB=flowmastery
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - flowmastery-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U flowmastery"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: flowmastery-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - flowmastery-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx Reverse Proxy (disabled until config files are created)
  # nginx:
  #   image: nginx:alpine
  #   container_name: flowmastery-nginx
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
  #     - ./config/nginx/sites:/etc/nginx/sites-enabled
  #     - ./config/ssl:/etc/nginx/ssl
  #   depends_on:
  #     - frontend
  #     - backend
  #   networks:
  #     - flowmastery-network

  # pgAdmin for Database Management (development only)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: flowmastery-pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@flowmastery.io
      - PGADMIN_DEFAULT_PASSWORD=admin
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - flowmastery-network
    profiles:
      - development

  # Redis Commander for Redis Management (development only)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: flowmastery-redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - flowmastery-network
    profiles:
      - development

networks:
  flowmastery-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:
  backend_data:
